#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass book
\use_default_options true
\master ../main.lyx
\maintain_unincluded_children false
\language french
\language_package default
\inputencoding auto
\fontencoding global
\font_roman lmodern
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement th
\paperfontsize 12
\spacing onehalf
\use_hyperref true
\pdf_title "Une Approche de Transformation des Diagrammes d'Activité d'UML2.0 Mobile vers les Réseau de Petri"
\pdf_author "Guerrouf Fayçal"
\pdf_keywords "diagrammes d'activité reseaux de Petri AtOm3 transformation de graphes"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 18pt
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:UML"

\end_inset

UML & La Mobilité
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
chaptermark{uml}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'avènement de la technologie de réseau informatique a incité les chercheurs
 à développer de nouveaux paradigmes de communication dont les processus
 peuvent se déplacer sur le réseau.
 Le développement des logiciels à base de ces paradigmes nécessite des extension
s appropriées des méthodes et des concepts traditionnels.
 
\end_layout

\begin_layout Standard
UML
\begin_inset CommandInset citation
LatexCommand cite
key "OMG2005"

\end_inset

 
\emph on
(Unified Modeling Language),
\emph default
 le langage de modélisation unifié, fournit des mécanismes d'extension.
 Ces derniers permettent d'adapter les spécifications UML à des exigences
 d'un domaine spécifique.
 Ainsi, l'extension UML mobile a été proposée pour satisfaire les besoins
 en modélisation de la mobilité.
 
\end_layout

\begin_layout Standard
Dans ce chapitre, nous rappellerons quelques définitions et quelques concepts
 sur la mobilité et UML 2.0 puis nous verrons une extension de diagramme
 d’activités d'UML 2.0 permettant de modéliser un des paradigmes de code
 mobile.
 
\end_layout

\begin_layout Section
Paradigmes de Code Mobile 
\end_layout

\begin_layout Standard
La mobilité de code peut être définie, d'une manière informelle, comme la
 capacité de changer dynamiquement la relation entre les fragments de code
 et l'endroit où elles sont exécutées 
\begin_inset CommandInset citation
LatexCommand cite
key "Fuggetta1998"

\end_inset

.
\end_layout

\begin_layout Standard
Alfonso Fuggetta et Giovanni Vigna 
\begin_inset CommandInset citation
LatexCommand cite
key "Fuggetta1998"

\end_inset

 ont identifié trois principaux paradigmes exploitant la mobilité de code:
 
\end_layout

\begin_layout Enumerate
Évaluation à distance.
 
\end_layout

\begin_layout Enumerate
Code à la demande.
 
\end_layout

\begin_layout Enumerate
Agent mobile.
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ces paradigmes sont caractérisés par 
\begin_inset CommandInset citation
LatexCommand cite
key "Fuggetta1998"

\end_inset

: 
\end_layout

\begin_layout Enumerate
La localisation des composantes 
\emph on
(Code et Ressources)
\emph default
 avant et après l'exécution de code.
\end_layout

\begin_layout Enumerate
L'unité d'exécution chargée d'exécuter le code.
 
\end_layout

\begin_layout Enumerate
La localisation où l'exécution de code se déroule en réalité.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dans le cadre de notre étude, on s'intéresse aux agents mobiles.
 Ainsi, seulement ces derniers seront vus en détail.
\end_layout

\begin_layout Subsection
Évaluation à Distance
\end_layout

\begin_layout Standard
Dans le paradigme d'évaluation à distance, on trouve des serveurs qui exécutent
 des codes provenant des clients.
 Après l'exécution, un résultat est retourné au client 
\begin_inset CommandInset citation
LatexCommand cite
key "Fuggetta1998"

\end_inset

.
 
\end_layout

\begin_layout Standard
Un exemple de ce type de paradigme est celui des interactions des imprimantes
 
\emph on
PostScript
\emph default
.
 Le code d'une requête 
\emph on
SQL
\emph default
 (Structured Query Language) émis vers un serveur de base de données représente
 un autre exemple d'évaluation à distance.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
mémoire de nadia + de N11(message de l'encadreur)+ mémoire de fichier cubat.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:evaluation-distante"

\end_inset

 représente le schéma de l’évaluation à distance
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/code-demande.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:evaluation-distante"

\end_inset

Évaluation distante
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Code à la Demande
\end_layout

\begin_layout Standard
Le client dispose de l’unité d’exécution et des ressources mais pas du code
 nécessaire à la réalisation de service.
 Ce dernier va être récupéré auprès du serveur.
 Il s’agit donc de l’inverse du cas précédent.
 Ainsi, un client adresse une requête uniquement pour récupérer un code
 précis afin de l’exécuter localement avec ces ressources locale 
\begin_inset CommandInset citation
LatexCommand cite
key "Fuggetta1998"

\end_inset

.
\end_layout

\begin_layout Standard
Cette méthode permet d’étendre les fonctionnalités d’une application directement
 chez le client sans avoir besoin d’effectuer une nouvelle installation.
 L’exemple le plus répandu de l’utilisation de cette méthode est le téléchargeme
nt d’applet Java
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://java.com/
\end_layout

\end_inset

 à partir d’un serveur Web.
 Ces applets sont des classes Java présentes sur le site serveur, ils vont
 être téléchargées d’abords, puis interpréter par la machine virtuelle du
 site client 
\begin_inset CommandInset citation
LatexCommand cite
key "Fuggetta1998"

\end_inset

.
\end_layout

\begin_layout Standard
La figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Code-demande"

\end_inset

 représente le schéma de code à la demande.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/remote-evaluation.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Code-demande"

\end_inset

Code à la demande
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Agent Mobile
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
protocole de communication
\end_layout

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

fipa et jad
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout
plus de détaille sur la mobilité
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
L’intelligence artificielle et la migration de processus sont à l'origine
 des agent mobile.
 Dans la suite nous allons voir qu'est ce qu'un agent dans le monde de l'intelli
gence artificiel et qu'est ce que la migration de processus.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
ils ont été introduits initialement en 1994 avec l’environnement Telescript
 
\begin_inset CommandInset citation
LatexCommand cite
key "White1994"

\end_inset

qui permettait à des processus de choisir eux-mêmes de se déplacer sur les
 sites d’un réseau afin de travailler localement sur les ressources.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Avant de passer à l’étude plus approfondie des agents mobiles
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Les agents mobiles regroupent deux concepts, le premier est celui d'agent
 issu du monde d'intelligence artificielle, le deuxième est celui de la
 migration du processus issue des systèmes répartis 
\begin_inset CommandInset citation
LatexCommand cite
key "CROS2005"

\end_inset

.
\end_layout

\begin_layout Standard
Un agent est, généralement, décrit comme une entité persistante avec un
 certain degré d'indépendance ou d'autonomie qui effectue un ensemble d'opératio
ns en fonction de ce qu'il perçoit.
 Un agent est doté, habituellement, d'un certain niveau d'intelligence,
 comme il doit avoir connaissance de ses buts et ses désirs.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Définition d’Agent 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
D'un point de vue étymologique, le mot agent vient du latin "agere" qui
 signifie agir.
 Littéralement, l'agent est donc celui qui agit.
 Il existe, à l'heure actuelle, encore plusieurs définitions de ce qu'est
 un agent
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Plusieurs définitions on été donnée aux agents intelligents.
 Ferber 
\begin_inset CommandInset citation
LatexCommand cite
key "Ferb95a"

\end_inset

 définit un agent comme une entité autonome, réelle ou abstraite, capable
 d’agir sur elle même et sur son environnement.
 Un agent dans un univers multi-agents, peut communiquer avec d’autres agents
 et dont le comportement est la conséquence de ses observations, de ses
 connaissances et des interactions avec les autres agents.
 
\end_layout

\begin_layout Standard
Pour Jennings, Sycara et Wooldridge 
\begin_inset CommandInset citation
LatexCommand cite
key "Jennings1998"

\end_inset

, un agent est un système informatique, situé dans un environnement et agit
 d’une façon autonome et flexible pour atteindre les objectifs pour lesquels
 il a été conçu.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Dans la suite nous verrons la propriété de communication et de migration
 des agents mobile.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Les notions 
\begin_inset Quotes eld
\end_inset

situé
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

autonomie
\begin_inset Quotes erd
\end_inset

 et 
\begin_inset Quotes eld
\end_inset

flexible
\begin_inset Quotes erd
\end_inset

 sont définies comme suit : 
\end_layout

\begin_layout Itemize

\emph on
situé
\emph default
 : l’agent est capable d’agir sur son environnement à partir des entrées
 sensorielles qu’il reçoit de ce même environnement.
 Exemples : systèmes de contrôle de processus, systèmes embarqués etc.
\end_layout

\begin_layout Itemize

\emph on
autonome
\emph default
 : l’agent est capable d’agir sans l’intervention d’un tiers (humain ou
 agent) et contrôle ses propres actions ainsi que son état interne.
\end_layout

\begin_layout Itemize

\emph on
flexible
\emph default
 : l’agent dans ce cas est :
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
capable
\emph default
 de répondre à temps : l’agent doit être capable de percevoir son environnement
 et d’élaborer une réponse dans les temps requis.
\end_layout

\begin_layout Itemize

\emph on
proactif
\emph default
 : l’agent doit exhiber un comportement proactif et opportuniste, tout en
 étant capable de prendre l’initiative au “bon” moment.
\end_layout

\begin_layout Itemize

\emph on
social
\emph default
 : l’agent doit être capable d’interagir avec les autres agents (logiciels
 et humains) quand la situation l’exige afin de compléter ses tâches ou
 aider ces agents à accomplir les leurs.
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Une aure définition beaucoup plus détaillée de Jacques Ferber 
\begin_inset CommandInset citation
LatexCommand cite
key "Ferb95a"

\end_inset

 
\end_layout

\begin_layout Plain Layout
On appelle agent une entité physique ou virtuelle:
\end_layout

\begin_layout Enumerate
Qui est capable d'agir dans un environnement
\end_layout

\begin_layout Enumerate
Qui peut communiquer directement avec d'autres agents
\end_layout

\begin_layout Enumerate
Qui est mue par un ensemble de tendances (sous la forme qu'elle cherche
 à optimiser)
\end_layout

\begin_layout Enumerate
Qui possède des ressources propres
\end_layout

\begin_layout Enumerate
Qui est capable de percevoir (mais de manière limitée) son environnement
\end_layout

\begin_layout Enumerate
Qui ne dispose que d'une représentation partielle de cet environnement (et
 éventuellement aucune)
\end_layout

\begin_layout Enumerate
Qui possède des compétences et offre des services
\end_layout

\begin_layout Enumerate
Qui peut éventuellement se reproduire
\end_layout

\begin_layout Enumerate
Dont le comportement tend à satisfaire ses objectifs, en tenant compte des
 ressources et des compétences dont elle dispose et en fonction de sa perception
, de ses représentations et des communications qu'elle reçoit.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
guesbaya
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Structure d’un agent mobile
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
peut ajouter la partie de motivation de mémoire de 
\begin_inset Quotes eld
\end_inset

Ben Seghir Nadia 
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Migration d'Agent 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Thèse de Doctorat Conception et réalisation d'un gestionnaire.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La migration est un mécanisme qui vise à transférer un agent d’un site sur
 un autre pour poursuivre son exécution 
\begin_inset CommandInset citation
LatexCommand cite
key "Fuggetta1998"

\end_inset

.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
end
\end_layout

\end_inset

 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
La technologie des agents mobiles.pdf
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Le problème principal vient du fait que nous ayons à faire à des agents,
 c'est-à-dire des entités autonomes qui répondent à des sollicitations externes
 et internes (leurs propres sollicitations).
 De ce fait l'agent mobile peut
\end_layout

\begin_layout Itemize
être sollicité de l'extérieur pour faire une migration alors qu'il est en
 train d'effectuer des traitements.
\end_layout

\begin_layout Itemize
ou la solliciter lui-même alors qu'il est sollicité de l'extérieur.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Deux types de mécanismes de migration ont été proposés dans les environnements
 d’agents mobiles; La migration faible et la migration forte.
\end_layout

\begin_layout Paragraph

\emph on
Migration Forte :
\end_layout

\begin_layout Standard
Elle permet la migration du code et de l'état d'exécution en même temps,
 ce qui permet à un agent de continuer son exécution du point où il a été
 arrêté pour migrer.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
la migration forte permet à un agent de se déplacer quelque soit l'état
 d'exécution dans lequel il se trouve et de reprendre son exécution après
 la migration exactement là où elle en était avant.
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph

\series bold
\emph on
Migration Faible (clonage) :
\end_layout

\begin_layout Standard
Elle ne permet à un agent que la migration de son code et ses données.
 A chaque migration l'agent doit s'exécuter du début.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
la migration faible ne fait que de transférer avec l'agent son code et ses
 données et soit nécessite des moments privilégiés dans le code de l'agent
 pour pouvoir être lancée (point d'arrêt), soit peut être lancée à tout
 moment mais avec perte des traitements en cours.
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
end
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Subsubsection
La communication entre agents
\end_layout

\begin_layout Subsubsection
Types d'agents mobiles
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
start
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Plusieurs types d’agents mobiles peuvent exister.
 Ils sont à regrouper en fonction des tâches génériques qu’ils sont en mesure
 d’exécuter.
 Nous citons ci-dessous quelques types d’agents mobiles que nous avons rencontré
s dans la littérature [6].
 
\end_layout

\begin_layout Plain Layout

\series bold
Statique
\series default
 : Un agent statique est un agent mobile qui n’exécute en général qu’une
 seule migration.
 Cette migration s’effectue depuis la station de départ vers un noeud bien
 défini au lancement.
 A l’arrivée sur le noeud, l’agent mobile ne migre plus mais exécute une
 tâche prédéfinie.
\end_layout

\begin_layout Plain Layout

\series bold
Visiteur
\series default
 : Un agent visiteur est un agent mobile qui visite successivement les différent
s noeuds de la plate-forme afin d’y appliquer la même fonction d’administration
 du réseau, par exemple, en récupérant les versions des systèmes d’exploitation
 installées sur les éléments du réseau.
\end_layout

\begin_layout Plain Layout

\series bold
Collecteur de données
\series default
 : Un agent collectant les données est un agent mobile qui nécessite un
 point de rendez-vous avec un ou plusieurs autres agents mobiles pour les
 décharger des données que ces derniers ont collectées.
 Après la collecte, cet agent transporte les données jusqu’à un système
 défini à l’avance.
\end_layout

\begin_layout Plain Layout

\series bold
Agent de suivi d’incident
\series default
 : Un agent de suivi d’incident est un agent qui est programmé pour réagir
 aux données qu’il analyse.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Plain Layout
fin L:
\backslash
temp last
\backslash
temp
\backslash
mobility
\backslash
MOIBILE AGENT
\backslash
++
\backslash
PFE_A imprimer 21_05_2006 page 9
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Subsubsection
avantages et inconvenients des agents mobiles
\end_layout

\begin_layout Plain Layout

\series bold
La performance
\end_layout

\begin_layout Plain Layout

\series bold
Diminution de l’utilisation du réseau
\end_layout

\begin_layout Plain Layout

\series bold
Des calculs indépendants
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Plain Layout
Software development for mobile computing and mobile computations requires
 appropriate extensions of the traditional methods and concepts for more
 traditional system models.
 Moreover, the correctness and security of implementations of systems based
 on mobile code presents a major concern, as mobile agents may roam the
 network and must be guaranteed to work reliably in different locations
 and in different environments.
 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Plain Layout
Reﬁning Mobile UML State Machines
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Communication entre Agents
\end_layout

\begin_layout Standard
Les agents sont créés pour être capables d'atteindre des objectifs qui sont
 difficiles en agissant individuellement .
 
\end_layout

\begin_layout Standard
Habituellement, un agent coopère avec d'autres agents, il doit donc avoir
 des capacités sociales et communicatives 
\begin_inset CommandInset citation
LatexCommand cite
key "Obitko2007"

\end_inset

.
 Pour communiquer, les agents doivent être en mesure de:
\end_layout

\begin_layout Itemize

\series bold
\emph on
Envoyer et recevoir des messages :
\series default
\emph default
 À ce niveau
\begin_inset Note Note
status open

\begin_layout Plain Layout
physique
\end_layout

\end_inset

, les agents doivent communiquer sur des normes physiques et les couches
 du réseau pour être en mesure d'envoyer et de recevoir des chaînes de caractère
s ou des objets qui représentent des messages.
\end_layout

\begin_layout Itemize

\series bold
\emph on
Analyser les messages :
\series default
\emph default
 Au niveau syntaxique, les agents doivent être en mesure d'analyser les
 messages, pour le décoder correctement en ses parties, tels que le contenu
 du message, la langue, l'expéditeur et doit aussi être capable d'analyser
 son contenu.
\end_layout

\begin_layout Itemize

\series bold
\emph on
Comprendre les messages:
\series default
 
\emph default
Au niveau sémantique, les messages analysés doivent être compris de la même
 manière, c'est à dire, l'ontologie décrivant les symboles doivent être
 partagée ou explicitement exprimée et accessible pour être en mesure de
 décoder les informations contenues dans le message
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
La communication entre agents peut être de deux types.
 Elle peut être centralisée en s’effectuant par partage d’information via
 un tableau noir ou décentralisée par envoi de message
\end_layout

\begin_layout Paragraph

\emph on
(a)
\begin_inset space ~
\end_inset

Communication par partage d'information :
\end_layout

\begin_layout Standard
Ce type de communication s’effectue via un tableau noir.
 Ce dernier fournit un milieu pour échanger les données, qui sont écrites
 dessus par les agents participants.
 N'importe quel agent peut obtenir l'accès aux informations et aux messages
 signalés sur le tableau noir.
\end_layout

\begin_layout Paragraph

\emph on
(b)
\begin_inset space ~
\end_inset

Communication par envoi de messages: 
\end_layout

\begin_layout Standard
Dans ce type de communication, les agents sont liés directement et un message
 est envoyé directement au destinataire.
 La communication se fait, soit en mode point à point, soit en mode par
 diffusion.
\end_layout

\begin_layout Enumerate

\emph on
mode point à point
\emph default
 : l’agent émetteur du message connaît et précise l’adresse de ou des agent(s)
 destinataire(s).
 
\end_layout

\begin_layout Enumerate

\emph on
mode par diffusion
\emph default
 : le message est envoyé à tous les agents du système.
 
\end_layout

\begin_layout Subsubsection
Langages de Communication entre Agents (
\emph on
ACL
\emph default
)
\end_layout

\begin_layout Standard
Les deux langages les plus utilisés, pour la communication entre Agents
 sont 
\series medium
KQML (Knowledge Query and Manipulation Language) et 
\series default
FIPA
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Organisation Foundation for Intelligent Physical Agents (FIPA) est une des
 normes 
\emph on

\begin_inset Quotes eld
\end_inset

IEEE Computer Society organisation
\begin_inset Quotes erd
\end_inset


\emph default
 qui promeut la technologie à base d'agents et de l'interopérabilité de
 ses normes avec d'autres technologies.
\end_layout

\end_inset

-ACL
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Agent Communication Languag
\end_layout

\end_inset

, qui sont très similaire.
 il sont fondé sur la même théorie des actes de langage 
\begin_inset CommandInset citation
LatexCommand cite
key "austin_jl:1962b"

\end_inset

.Ils considèrent que les messages échangés sont des actes communicatifs.
 Les spécifications de FIPA-ACL se composent d’un ensemble de types de message
 et de la description.
 Un message comprend plusieurs éléments, comme l'illustre l'exemple suivant:
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=trBL,frameround=tttt"
inline false
status open

\begin_layout Plain Layout

(inform   
\end_layout

\begin_layout Plain Layout

      :sender agent1    
\end_layout

\begin_layout Plain Layout

      :receiver hpl-auction-server
\end_layout

\begin_layout Plain Layout

      :content (price (bid good02) 150)             
\end_layout

\begin_layout Plain Layout

      :in-reply-to round-4             
\end_layout

\begin_layout Plain Layout

      :reply-with bid04             
\end_layout

\begin_layout Plain Layout

      :language sl             
\end_layout

\begin_layout Plain Layout

      :ontology hpl-auction        
\end_layout

\begin_layout Plain Layout

) 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Le message ACL contient plusieurs paramètres.
 Le seul paramètre obligatoire est performatif (acte de communication -
 tel que informer dans l'exemple précédent), mais la plupart des messages
 ACL contiennent également un expéditeur, un destinataire et des paramètres
 de contenu.
 Comme on peut le voir, le message ACL est indépendant du contenu.
\end_layout

\begin_layout Standard
Il existe plusieurs implémentations de la norme FIPA.
 Probablement l'implémentation la plus populaire est 
\emph on

\begin_inset Quotes eld
\end_inset

Jade
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://jade.tilab.com/
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset


\emph default
 ( Java Agent Development Framework ).
\end_layout

\begin_layout Standard
Après avoir évoqué brièvement la mobilité nous verrons dans la suite de
 ce chapitre comment peut-on modéliser les agents mobiles avec UML
\emph on
.

\emph default
 
\end_layout

\begin_layout Section
Langage de Modélisation Unifié (UML)
\end_layout

\begin_layout Standard
Le langage de modélisation unifié (UML) est un langage de modélisation visuelle,
 utilisé pour spécifier, visualiser, construire et documenter les artefacts
 d'un système logiciel
\begin_inset CommandInset citation
LatexCommand cite
key "Hamilton2006"

\end_inset

.
 
\end_layout

\begin_layout Standard
Il est utilisé pour comprendre, concevoir, naviguer, configurer, maintenir
 et contrôler les informations sur les systèmes modélisés 
\begin_inset CommandInset citation
LatexCommand cite
key "Rumbaugh"

\end_inset

.
\end_layout

\begin_layout Standard
UML est un condensé de trois notations importantes 
\emph on
(Booch, OMT
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
object-modeling technique
\end_layout

\end_inset

, OOSE
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Object Oriented Software Engineering
\end_layout

\end_inset

)
\emph default
.
 Il a eu un impact indéniable sur la façon dont nous considérons le développemen
t des systèmes 
\begin_inset CommandInset citation
LatexCommand cite
key "Pender2003"

\end_inset

.
\end_layout

\begin_layout Standard
La première version d’UML, publiée par l’OMG
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://www.omg.org/, Object Management Group: un consortium d’industrie informatiq
ue internationale , ouverte, sans but lucratif.
\end_layout

\end_inset

 été 
\emph on
(UML 1.0)
\emph default
 en 1997, puis la version d'UML 1.x 
\emph on
(UML 1.1, UML 1.4 UML 1.5)
\emph default
 jusqu'à 2004 avec la sortie de la version 
\emph on
UML 2.0.
\end_layout

\begin_layout Subsection
UML et Méta-Modélisation
\end_layout

\begin_layout Standard
UML est basé sur l'architecture de méta-modélisation à quatre niveaux.
 Chaque niveau successif est marqué de 
\emph on
M3
\emph default
 à 
\emph on
M0
\emph default
 et sont, habituellement, nommés méta-méta-modèle, méta-modèle, diagramme
 de classes et diagramme d'objets respectivement 
\begin_inset CommandInset citation
LatexCommand cite
key "OMG2005"

\end_inset

.
 
\end_layout

\begin_layout Standard
Un diagramme de niveau, 
\emph on
Mi,
\emph default
 est une instance d'un diagramme de niveau 
\emph on
Mi +1
\emph default
.
 Le diagramme de niveau 
\emph on
M3
\emph default
 est utilisé pour définir la structure d'un méta-modèle.
 Le Meta Object Facility (
\emph on
MOF
\emph default
) appartient à ce niveau.
 Le méta-modèle d'UML appartient au niveau 
\emph on
M2
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "OMG2005"

\end_inset

.
 UML est, formellement, défini en utilisant un méta-modèle qui est, lui-même,
 exprimé en UML 
\begin_inset CommandInset citation
LatexCommand cite
key "Rumbaugh"

\end_inset

.
 
\end_layout

\begin_layout Standard
La figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Architecture-de-meta-modelisation"

\end_inset

 illustre cette définition
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/metamodel.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Architecture-de-meta-modelisation"

\end_inset

Architecture de méta-modélisation à quatre niveaux
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nous verrons le concept de méta modélisation en détail dans la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Méta-Modélisation"

\end_inset

 du chapitre 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Approche-de-Transformation"

\end_inset

.
\end_layout

\begin_layout Subsection
Diagrammes d’UML
\begin_inset space ~
\end_inset

2.0
\end_layout

\begin_layout Standard
La notation UML est décrite sous forme d’un ensemble de diagrammes.
 La spécification de la version d'UML 2.0 définit 13 diagrammes regroupés
 dans deux classes principales qui sont 
\begin_inset CommandInset citation
LatexCommand cite
key "OMG2005"

\end_inset

:
\end_layout

\begin_layout Enumerate
Les diagrammes statiques
\end_layout

\begin_layout Enumerate
Les diagrammes comportementaux
\end_layout

\begin_layout Subsubsection

\series bold
Diagrammes statiques
\end_layout

\begin_layout Standard
Les diagrammes statiques (structurels) illustrent les caractéristiques statiques
  d'un modèle.
 
\end_layout

\begin_layout Standard
Les diagrammes statiques regroupent 
\begin_inset CommandInset citation
LatexCommand cite
key "Pender2003"

\end_inset


\end_layout

\begin_layout Enumerate
les diagrammes de classes,
\end_layout

\begin_layout Enumerate
les diagrammes d’objets,
\end_layout

\begin_layout Enumerate
les diagrammes de structure composite,
\end_layout

\begin_layout Enumerate
les diagrammes de composants,
\end_layout

\begin_layout Enumerate
les diagrammes de déploiement, 
\end_layout

\begin_layout Enumerate
les diagrammes de paquetages.
\end_layout

\begin_layout Subsubsection

\series bold
Diagrammes dynamiques
\end_layout

\begin_layout Standard
Les diagrammes comportementaux décrivent la façon dont les ressources modélisées
 dans les diagrammes structurels interagissent.
 
\end_layout

\begin_layout Standard
Les diagrammes dynamiques
\series bold
 
\series default
regroupent 
\begin_inset CommandInset citation
LatexCommand cite
key "Pender2003"

\end_inset

:
\end_layout

\begin_layout Enumerate
les diagrammes de cas d’utilisation, 
\end_layout

\begin_layout Enumerate
diagrammes d’activités, 
\end_layout

\begin_layout Enumerate
les diagrammes d’états-transitions, 
\end_layout

\begin_layout Enumerate
les diagrammes d’interactions
\end_layout

\begin_deeper
\begin_layout Enumerate
Diagramme de séquence
\end_layout

\begin_layout Enumerate
Diagramme de communication 
\end_layout

\begin_layout Enumerate
Diagramme global d’interaction 
\end_layout

\begin_layout Enumerate
Diagramme de temps
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dans notre projet on s'intéresse seulement au diagramme d'activités, pour
 cela la section suivante sera consacrée au diagramme d'activités.
\end_layout

\begin_layout Subsection
Diagrammes d’Activités
\end_layout

\begin_layout Standard
Les diagrammes d'activités permettent de spécifier la façon dont le système
 atteint ses objectifs.
 Ils décrivent un flux séquentiel d'actions pour représenter un processus
 se produisant dans le système modélisé.
 Par exemple, on peut utiliser un diagramme d'activités pour modéliser les
 étapes de la création ou de gestion d'un compte de blog 
\begin_inset CommandInset citation
LatexCommand cite
key "Hamilton2006"

\end_inset

.
\end_layout

\begin_layout Standard
La figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Exemple-de-diagramme-activity"

\end_inset

 représente un diagramme d'activité d'un processus de gestion des comptes.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/activityexemple.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Exemple-de-diagramme-activity"

\end_inset

Exemple de diagramme d'activité
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Notation
\end_layout

\begin_layout Standard
Nous présentons dans cette sous section seulement quelques éléments de modélisat
ion de base des diagrammes d'activité 
\begin_inset CommandInset citation
LatexCommand cite
key "OMG2005"

\end_inset

, pour plus de détail voir 
\begin_inset CommandInset citation
LatexCommand cite
key "OMG2005,Pender2003,Erik98a"

\end_inset


\end_layout

\begin_layout Enumerate

\series bold
\emph on
Action
\emph default
 :
\series default
 Une action est l'unité fondamentale de la spécification de comportement.
 L'action prend un ensemble d'entrées et les convertit en un ensemble de
 résultats, l'une ou les deux ensembles peuvent être vide.
 Une action ne peut être décomposée en actions plus simples.
 
\end_layout

\begin_deeper
\begin_layout Standard
Une action peut être, par exemple :
\end_layout

\begin_layout Itemize
une affectation de valeur à des attributs
\end_layout

\begin_layout Itemize
la création d’un nouvel objet ou lien
\end_layout

\begin_layout Itemize
l’émission d’un signal
\end_layout

\begin_layout Itemize
la réception d’un signal
\end_layout

\begin_layout Itemize
etc.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
La notation d'une action est un rectangle avec des coins arrondis.
 La figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Exemple-de-notation-action"

\end_inset

 montre trois exemples d'actions.
 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/notation-action.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Exemple-de-notation-action"

\end_inset

Notation d'action
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
\emph on
Activité
\emph default
 :
\series default
 Une activité contient des séquences d'actions et / ou d'autres activités.
 On utilise les activités pour grouper des séquences d'actions ensemble.
 
\end_layout

\begin_layout Enumerate

\series bold
\emph on
Nœud
\emph default
 
\emph on
de
\emph default
 
\emph on
contrôle
\emph default
:
\series default
 On utilise les nœuds de contrôle pour guider le flux de contrôle (et le
 flux d'objets) à travers un groupe d'activités et d'actions.
 Les nœuds de contrôle viennent dans une variété de formes, en fonction
 de ce qu'on a besoin, ils servent comme un agent de circulation pour le
 flux de contrôle et les flux d'objets.
\end_layout

\begin_deeper
\begin_layout Standard
Les nœuds de contrôle sont les suivants:
\end_layout

\begin_layout Itemize

\series bold
\emph on
Initial
\emph default
 :
\series default
 Un nœud initial est l'endroit où le flux de contrôle commence quand une
 activité est invoquée.
 La Figure 
\series bold

\begin_inset CommandInset ref
LatexCommand ref
reference "fig:La-notation-de-noeud-initiale"

\end_inset


\series default
 montre la notation d'un nœud initial.
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/notation-initiale.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:La-notation-de-noeud-initiale"

\end_inset

Notation de nœud initial 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\series bold
 
\end_layout

\begin_layout Itemize

\series bold
\emph on
Final
\emph default
 :
\series default
 Un nœud final est un nœud de contrôle dans laquelle un ou plusieurs flux
 au sein d'une activité donnée s'arrêtent.
 Il existe deux types de nœuds finaux: 
\end_layout

\begin_deeper
\begin_layout Enumerate
nœud de flux final.
\end_layout

\begin_layout Enumerate
nœud d'activité final.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/notation-finale-activity.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:La-notation-final-activity"

\end_inset

Nœud d'activité final
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/notation-finale-flow.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:La-notation-flow-finale"

\end_inset

Nœud de flux final
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Notation de noeud final
\end_layout

\end_inset


\end_layout

\end_inset


\series bold
 
\end_layout

\end_deeper
\begin_layout Standard
La figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:La-notation-final-activity"

\end_inset

 et 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:La-notation-flow-finale"

\end_inset

 montre la notation de nœud final.
 
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\emph on
Décision
\emph default
 :
\series default
 offre un choix entre deux ou plusieurs activités sortantes, dont chacune
 a une expression booléenne qui doit résoudre à 
\emph on
Vrai
\emph default
 avant la prise de chemin.
\end_layout

\begin_deeper
\begin_layout Standard
Un nœud de décision apparaît comme un diamant, comme le montre la figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:notation-decision"

\end_inset

 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/notation-decision.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:notation-decision"

\end_inset

Notation de noeud de décision
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\emph on
Fusion
\emph default
 
\emph on
(Merge)
\emph default
 : 
\series default
Regroupe des flux multiples.
\end_layout

\begin_layout Itemize

\series bold
\emph on
Bifurcation
\emph default
 :
\series default
 Divise un flux en plusieurs flux simultanés.
 La figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:notation-bifurcation"

\end_inset

 montre sa notation.
 
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/notation-fork.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:notation-bifurcation"

\end_inset

Notation de noeud de bifurcation
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
voir seting de la figure 
\begin_inset Quotes eld
\end_inset

here definitly
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
La figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Exemple-de-Control-Nœuds"

\end_inset

 illustre l'utilisation des notations des nœuds de contrôle 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/activity-control.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Exemple-de-Control-Nœuds"

\end_inset

Exemple de nœuds de contrôle 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Noeud exécutable :
\series default
 Un nœud exécutable est un nœud d'activité qui peut être exécuté.
 Un nœud exécutable possède un ou plusieurs gestionnaires d'exception.
 Chaque gestionnaire spécifie un nœud exécutable à exécuter en cas d'une
 exception produite pendant l'exécution d'un autre nœud exécutable.
\end_layout

\begin_deeper
\begin_layout Standard
La figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Exemple-d'exception"

\end_inset

 représente un exemple d'une exception.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/ExceptionHandler1.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Exemple-d'exception"

\end_inset

Exemple d'exception
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Nœud d'objet :
\series default
 Un nœud d'objet apparaît généralement comme un rectangle avec son nom à
 l'intérieur.
 La figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:notation-objet"

\end_inset


\series bold
 
\series default
montre un exemple de sa notation.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/notation-objet.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:notation-objet"

\end_inset

Notation de nœud d'objet
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Partition :
\series default
 Les activités peuvent impliquer de différents acteurs, tels que les différents
 groupes dans une organisation ou un système.
 pour cela, on utilise des partitions pour montrer quel participant est
 responsable pour quelles actions.
 Les Partitions divisent le diagramme en colonnes et/ou en lignes et contiennent
 des actions qui sont menées par le groupe responsable.
 Les partitions sont parfois dénommés 
\emph on
swimlanes
\emph default
.
 La figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Exemple-de-diagramme-partition"

\end_inset

 illustre la notation de partition.
\end_layout

\begin_deeper
\begin_layout Standard

\emph on
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/activity-partition1.pdf

\end_inset


\end_layout

\begin_layout Plain Layout

\emph on
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Exemple-de-diagramme-partition"

\end_inset

Exemple de diagramme d'activité avec partitions
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsection
Extension d'UML
\end_layout

\begin_layout Standard
UML peut être étendu ou adapté à une méthode, organisation, ou utilisateur
 spécifique.
 
\end_layout

\begin_layout Standard
Il y a trois mécanismes d'extension dans 
\emph on
UML
\emph default
 qui sont 
\begin_inset CommandInset citation
LatexCommand cite
key "Erik98a"

\end_inset

:
\end_layout

\begin_layout Enumerate
Stéréotypes
\end_layout

\begin_layout Enumerate
Valeurs étiquetées (tagged values)
\end_layout

\begin_layout Enumerate
Contraintes
\end_layout

\begin_layout Standard
Les mécanismes d'extension d'UML ont connu un grand succès, conduisant à
 une prolifération de nouveaux éléments de modèles et extensions.
 Les profils fournissent un mécanisme pour gérer ces extensions.
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Nous allons voir seulement le premier mécanisme que nous aurons besoin dans
 la section suivante
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Stéréotypes
\end_layout

\begin_layout Standard
Le mécanisme d'extension stéréotypes définit un nouveau type d'élément de
 modèle basé sur un élément de modèle existant.
 Ainsi, un stéréotype est comme l'élément existant, avec une sémantique
 et des propriétés supplémentaires qui ne sont pas présents dans l'élément
 existant.
\end_layout

\begin_layout Standard
Graphiquement, un stéréotype est rendu par un nom entouré de guillemets
 («» ou par <<>> si les guillemets ne sont pas disponibles) et placé au-dessus
 de nom d'un autre élément.
 Un stéréotype peut aussi être indiqué par une icône spécifique 
\begin_inset CommandInset citation
LatexCommand cite
key "Erik98a"

\end_inset

.
\end_layout

\begin_layout Standard
La figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Exemples-de-stereotype"

\end_inset

 représente des exemples de stéréotype.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/stereotype.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Exemples-de-stereotype"

\end_inset

Exemples de stéréotype 
\begin_inset CommandInset citation
LatexCommand cite
key "Rumbaugh"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Valeurs Étiquetées (tagged values)
\end_layout

\begin_layout Standard
Le but d'une valeur étiquetée est d'attribuer (ajouter) une propriété à
 un élément de modèle, en plus de ces propriétés déjà définies dans le méta-modè
le 
\begin_inset CommandInset citation
LatexCommand cite
key "Pender2003"

\end_inset

.
\end_layout

\begin_layout Standard
Les valeurs étiquetées sont exprimés sous la forme de 
\emph on

\begin_inset Quotes eld
\end_inset

nom = valeur
\begin_inset Quotes erd
\end_inset


\emph default
, par exemple author="Tom", project_phase=2, ou last_update="1-07-02" 
\begin_inset CommandInset citation
LatexCommand cite
key "Pender2003"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Contraintes
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Comme les stéréotypes, les contraintes apparaissent à travers des diagrammes
 UML.
\end_layout

\end_inset

 Les contraintes définissent les invariants qui permettent de préserver
 l'intégrité du système.
 Une contrainte définit une condition qui doit être vraie pour la durée
 du contexte dans lequel elle est définie.
 Elle est représentée par un texte placé entre accolades 
\begin_inset Quotes eld
\end_inset

{}
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "Pender2003"

\end_inset

.
\end_layout

\begin_layout Standard
La figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Exemple-de-Contraintes"

\end_inset

 représente des exemples de contraintes.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/contrainte.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Exemple-de-Contraintes"

\end_inset

Exemple de contraintes 
\begin_inset CommandInset citation
LatexCommand cite
key "Pender2003"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
UML Mobile
\end_layout

\begin_layout Standard
Les insuffisances d’UML dans la modélisation des agents mobiles ont motivé
 les auteurs à proposer des extensions pour adapter UML à pouvoir modéliser
 ce type de système.
 Ces travaux sont très rares et limités en général.
 Parmi ces travaux on cite l’extension d'Hubert Baumeister 
\begin_inset CommandInset citation
LatexCommand cite
key "oai:CiteSeerPSU:537821"

\end_inset

, Cornel Klein  
\begin_inset CommandInset citation
LatexCommand cite
key "books/idea/siau2001/KleinRSW01"

\end_inset

, Kassem Saleh 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/infsof/SalehE04"

\end_inset

 et Haralambos Mouratidis 
\begin_inset CommandInset citation
LatexCommand cite
key "Mouratidis"

\end_inset

.
\end_layout

\begin_layout Standard
Dans la suite, nous détaillerons l’extension de Miao Kang 
\begin_inset CommandInset citation
LatexCommand cite
key "oai:CiteSeerPSU:668251"

\end_inset

 que nous utiliserons dans notre projet.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Diagramme-Activite-Mobile"

\end_inset

Diagramme d'activités Mobile
\end_layout

\begin_layout Standard

\series medium
Le diagramme d'activité mobile est une extension de diagramme d'activité
 d'UML, en utilisant les Stéréotypes pour modéliser les propriétés des agents
 mobiles suivantes:
\end_layout

\begin_layout Enumerate
Mobilité.
\end_layout

\begin_layout Enumerate
Clonage.
\end_layout

\begin_layout Enumerate
Communication.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Agent-Emplacement"

\end_inset

Emplacement
\end_layout

\begin_layout Standard
On utilise les partitions multi-dimensions où une dimension représente un
 Emplacement et une autre dimension orthogonale représente un agent.
 
\end_layout

\begin_layout Enumerate
On ajoute le stéréotype 
\series bold
\size small
\emph on
«Host»
\series default
\size default
\emph default
 et un paramètre comme un nom unique (adresse) à la partition dont la dimension
 est verticale.
 Cela permet de représenter un emplacement
\end_layout

\begin_layout Enumerate
On ajoute le stéréotype 
\series bold
\size small
\emph on
«agent»
\series default
\size default
\emph default
 qui représente un agent comme une classe à la partition dont la dimension
 est horizontale.
\end_layout

\begin_layout Standard
La figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:La-classe-Agent-1"

\end_inset

 illustre l'utilisation des stéréotypes 
\series bold
\size small
\emph on
«agent»
\size default
 
\series default
et
\emph default
 
\series bold
\size small
\emph on
«Host»
\series default
\size default
\emph default
 et la figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:La-classe-Agent"

\end_inset

 illustre la classe 
\emph on
agent
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/agent-class.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:La-classe-Agent"

\end_inset

Classe agent
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset space \enskip{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/notation-class-agent.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:La-classe-Agent-1"

\end_inset

Exemple de notation
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Classe Agent 
\begin_inset CommandInset citation
LatexCommand cite
key "oai:CiteSeerPSU:668251"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Mobilité
\end_layout

\begin_layout Standard
Pour représenter la mobilité des agents entre les hôtes, on utilise une
 activité spéciale comme l'activité 
\series bold
\size small
\emph on

\begin_inset Quotes eld
\end_inset

Go
\series default
\emph default

\begin_inset Quotes erd
\end_inset


\size default
, donc si un agent doit se déplacer du 
\emph on

\begin_inset Quotes eld
\end_inset

Host1
\begin_inset Quotes erd
\end_inset


\emph default
 vers 
\emph on

\begin_inset Quotes eld
\end_inset

Host2
\begin_inset Quotes erd
\end_inset


\emph default
 il doit exécuter l'activité 
\series bold
\size small
\emph on

\begin_inset Quotes eld
\end_inset

Go
\series default
\emph default

\begin_inset Quotes erd
\end_inset


\size default
, la figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:action-Go"

\end_inset

 illustre cette représentation.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/exemple-class-agent.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:action-Go"

\end_inset

Action Go 
\begin_inset CommandInset citation
LatexCommand cite
key "oai:CiteSeerPSU:668251"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dans le cas d'une exception, on utilise la notation d'UML 
\emph on
EXceptionHandler
\emph default
 comme il est illustré par la figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:action-Go-avec-exception"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/exception.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:action-Go-avec-exception"

\end_inset

Action Go avec exception 
\begin_inset CommandInset citation
LatexCommand cite
key "oai:CiteSeerPSU:668251"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Clonage
\end_layout

\begin_layout Standard
Le clonage est un autre comportement important d'agents mobiles, qui comprend
 plusieurs sous-activités.
 Cette activité permet à un agent en premier de cloner, puis de l'envoyer
 à un autre hôte.
 Ce comportement peut être répété afin d'envoyer le nombre de clones nécessaires.
 On utilise la notation UML 2.0 “ activités d'invocation ” afin de modéliser
 cette opération.
 
\end_layout

\begin_layout Standard
La figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Le-Clonage"

\end_inset

 représente cette notation
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/clonage.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Le-Clonage"

\end_inset

Clonage 
\begin_inset CommandInset citation
LatexCommand cite
key "oai:CiteSeerPSU:668251"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Communication
\end_layout

\begin_layout Standard
Les agents ont besoin de protocole de communication pour l'échange des messages.
 JADE 
\emph on
(Java Agent Development programming language)
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "aa01:216"

\end_inset

, qui est conforme à FIPA 
\emph on
(Foundation for Intelligent Physical Agents)
\emph default
, utilise une classe 
\emph on
ACLMessage
\emph default
.
 Cette dernière représente le Langage de communication entre Agent (ACL)
 par messages.
 Cette classe définit un ensemble de constantes, par exemple, 
\emph on
REQUEST
\emph default
, 
\emph on
INFORM
\emph default
, 
\emph on
QUERY
\emph default
, qui doivent être utilisés pour se référer aux performatifs FIPA.
\end_layout

\begin_layout Standard
On utilise le stéréotype prédéfini, 
\size small
\emph on
«ACLMessage»
\size default
\emph default
 qui désigne la classe de message 
\emph on

\begin_inset Quotes eld
\end_inset

ACLMessage
\begin_inset Quotes erd
\end_inset


\emph default
, pour spécifier explicitement le protocole de communication entre agent
 utilisé dans le modèle.
 L'exemple représenté par la figure 
\series bold

\begin_inset CommandInset ref
LatexCommand ref
reference "fig:communication-entre-Agent"

\end_inset


\series default
 montre que le type de message de réception et d'envoi est 
\begin_inset Quotes eld
\end_inset

ACLmessage
\begin_inset Quotes erd
\end_inset

 et ses performatif est 
\begin_inset Quotes eld
\end_inset

REQUEST
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/communication.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:communication-entre-Agent"

\end_inset

Communication entre agent 
\begin_inset CommandInset citation
LatexCommand cite
key "oai:CiteSeerPSU:668251"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Exemple-mobile-activity-auctionnig-system"

\end_inset

Exemple
\end_layout

\begin_layout Standard
Afin d'illustrer l'utilisation de cette approche, nous présenterons un système
 de vente aux enchères comme cas d'étude.
 Ce cas d'étude se compose de deux agents, 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
un agent 
\emph on

\begin_inset Quotes eld
\end_inset

commissaire priseur
\begin_inset Quotes erd
\end_inset


\emph default
, qui est immobile et un agent soumissionnaire mobile.
 L'agent 
\emph on
commissaire priseur
\emph default
 réside dans l'hôte vendeur et gère une interface graphique de vendeur humain,
 il montre l'état de la vente aux enchères et contrôle l'ensemble du processus.
 L' agent mobile soumissionnaire circule autour des soumissionnaires potentiels
 tout en recueillant des offres et en l'affichant sur l'interface graphique
 pour le soumissionnaires humain.
\end_layout

\end_inset

un agent vendeur 
\emph on
(Auctioneer)
\emph default
, qui est stationnaire et un agent mobile acheteur 
\emph on
(Bidder)
\emph default
.
 L'agent 
\emph on
‘‘Auctioneer’’
\emph default
 réside dans l'hôte de vente et gère une interface d'un homme vendeur pour
 lui permettre de contrôler l'opération de vente entièrement.
 L'agent mobile ‘‘
\emph on
Bidder
\emph default
’’ va circuler autour des acheteurs pour accumuler ses commandes, en affichant
 l'offre de  
\emph on
‘‘Auctioneer’’
\emph default
 sur l'interface de chaque acheteur.
\end_layout

\begin_layout Standard
La figue 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Partie-I-partII"

\end_inset

 et 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:exemple-complet"

\end_inset


\series bold
,
\series default
 illustre le diagramme d'activités mobile de l'étude de cas.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/part1.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/part2.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Partie-I-partII"

\end_inset

Partie I et Partie II de l'exemple
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/exemple.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:exemple-complet"

\end_inset

Diagramme d'activité de l'étude de cas
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
Nous avons présenté dans ce chapitre des notions et des concepts de base
 sur la mobilité et plus particulièrement les agents mobiles.
 Ils sont, principalement, caractérisés par leur pouvoir de se déplacer
 entre les nœuds d’un réseau afin de compléter des tâches qui leur ont été
 confiées.
\end_layout

\begin_layout Standard
Les spécificités des agents mobile ont rendu l'utilisation des méthodes
 et des moyens de modélisation traditionnels tel que UML non satisfaisantes.
 Pour cette raison, nous avons présenté une extension de diagramme d'activité
 mobile qui permet de les modéliser.
\end_layout

\begin_layout Standard
Dans le chapitre qui va suivre nous présenterons un formalisme de réseau
 de Petri qui permet aussi de modéliser les agents mobiles.
 
\end_layout

\begin_layout Standard

\series bold
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
9999
\end_layout

\begin_layout Plain Layout
Moreover, the correctness and security of implementations of systems based
 on mobile code presents a major concern, as mobile agents may roam the
 network and must be guaranteed to work reliably in different locations
 and in different environments
\end_layout

\begin_layout Plain Layout

\series bold
999999
\end_layout

\begin_layout Plain Layout
cependant, l'exactitude et la sécurité des implémentations de systèmes basés
 sur le code mobile présente un problème majeur, celui des agents mobiles
 peuvent parcourir le réseau et doit être garanti à fonctionner de manière
 fiable dans des lieux différents et dans des environnements différents
\end_layout

\begin_layout Plain Layout
Dans le chapitre suivant, on présentera les réseaux de Petri, qui sont un
 moyen formelle permettant de modéliser les agent mobile
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
ne pas oublier
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
